'number' + 3 + 3 // 'number' це string. Відбувається конкатенація, адже до чисел додається рядок.
result: number33

null + 3 // null означає відсутність значення. Тобто можна сказати, що приводиться до 0, тому результат буде 3.
result: 3

5 && "qwerty" // Тут присутній логічний оператор && (логічне "i"). 5 прирівнюється до true і рядок "qwerty" також true, тому у даному випадку повертається останнє обчислене значення, тобто "qwerty".
result: qwerty

+'40' + +'2' + "hillel" // Унарний + повертає значення операнд: string '40' і '2' і відповідно отримуємо числа 40 і 2, і тоді відбувається їхнє додавання, де отримуємо результат 42. Після цього відбувається конкатенація числа 42 і string "hillel", адже до чисел додається рядок.
result: 42hillel

'10' - 5 === 6 // '10' string, але інтерпретатор приводить текст до числа, відбувається обчислення, 10 - 5 = 5. Після цього відбувається дія (5 === 6), де === оператор строгої рівності. Оскільки 5 не дорівнює 6, отримуємо false.
result: false

true + false // Відбувається додавання двох boolean, де true=1, false=0. Отже у результаті буде 1.
result: 1

'4px' - 3 // '4px' - це string, яка містить число і літери, що у JavaScript немає значення. Отже результатом буде NaN (not a number), нічому не дорівнює, і навіть самому собі.
result: NaN

'4' - 3 // '4' string, але інтерпретатор приводить текст до числа, тому відбувається обчислення, де результат буде 1.
result: 1

'6' + 3 ** 0 // ** означає зведення у степінь. Будь-яке число в нульовому степені дорівнює 1. Тому після виконання 3 ** 0 отримуємо 1. Оскільки '6' string, то відбувається конкатенація, отримуємо 61.
result: 61

12 / '6' // '6' string, але інтерпретатор приводить текст до числа, і відбувається обчислення, тому результат буде 2.
result: 2

'10' + (5 === 6) // Спочатку відбувається ця дія (5 === 6), де === оператор строгої рівності. Оскільки 5 не дорівнює 6, отримуємо false. Далі відбувається конкатенація string '10' і boolean false.
result: 10false

null == '' // Тут відбувається порівняння, null порівнюється з '' (тобто з нічим, тут нічого немає). Результатом такого порівняння буде false.
result: false

3 ** (9 / 3) // Спочатку відбувається ділення (9 / 3) і отримуємо 3. Після цього відбувається зведення у степінь 3 ** 3 і отримуємо 27.
result: 27

!!'false' == !!'true' // Пристутній логічний оператор ! (логічне "не"). !!'false' - рядок зі значенням(не порожній), отже це true. Оскільки тут два !!, отже: не true a false, не false a true. !!'true' - рядок, отже це true, отже не true a false, не false a true. Тепер відбувається порівняння отриманих результатів, true == true, отримаємо true.
result: true

0 || '0' && 1 // Логічний оператор && ("i") має пріоритет над оператором || ("або"), тому спочатку виконується дія над '0' && 1, де '0' string, що має значення, і можна прирівняти до true, що є 1. Тому тут результат буде 1. Потім виконується дія над  0 || 1. Тут оператор "або" поверне перше значення, що можна прирівняти до true. Тому результат буде 1.
result: 1

(+null == false) < 1 // Спочатку відбувається дія у дужках, унарний + і null приводиться до null, а null приводиться до 0. Потім відбувається порівняння 0 до false, і результатом є true. Після цього буде порівняння true < 1, a true це 1, тому результат false.
result: false

false && true || true // Логічний оператор && ("i") має пріоритет над оператором || ("або"). Спочатку виконується дія над false && true, і повертається останнє обчислене значення true, а потім true || true, що дає у результаті true.
result: true

false && (false || true) // Спочатку відбувається дія над (false || true), оскільки вони у дужках, у результаті отримуємо true (оскільки оператор "або" працює так, що виходимо як тільки отримали true). Після цього виконується дія над false && true. Тут оператор ("i") оцінює операнди зліва на право і обирає перше false значення.
result: false

(+null == false) < 1 ** 5 // Унарний + і null приводиться до null, а null приводиться до 0. Потім відбувається порівняння 0 до false, і результатом є true. Потім у результаті зведення у степінь 1 ** 5 отримуємо 1. У підсумку порівнюємо, true < 1, де true це 1, і отримаємо false.
result: false
